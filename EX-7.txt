7. COURSE NAME: EXPRESS.JS
7. a) Module Name: Defining a route, Handling Routes, Route Parameters, Query Parameters Implement routing for the Adventure Trails application by embedding the necessary code in the routes/route.js file.

PROGRAM: -
things.js
var express = require('express');
var router = express.Router();
router.get('/', function(req, res){
res.send('GET route on things.');
});
router.post('/', function(req, res){
res.send('POST route on things.');
});
//export this router to use in our index.js
module.exports = router;
index.js
var express = require('Express');
var app = express();
var things = require('./things.js');
//both index.js and things.js should be in same directory
app.use('/things', things);
app.listen(3000);
OUTPUT: -
NO OUTPUT

7. b) Module Name: How Middleware works, Chaining of Middlewares, Types of MiddlewaresIn myNotes application: 
(i) we want to handle POST submissions. 
(ii) display customized errormessages. 
(iii) perform logging.

PROGRAM: -
const express = require('express')
const fsPromises = require('fs').promises;
const app = express()
const port = 3000
app.get('/one', (req, res) => {
fsPromises.readFile('./one.txt')
.then(data => res.send(data))
.catch(err => { // error handling logic 1
console.error(err) // logging error
res.status(500).send(err)
})
})
app.get('/two', (req, res) => {
fsPromises.readFile('./two.txt')
.then(data => res.send(data))
.catch(err => { // error handling logic 2
console.error(err)
res.redirect('/error') // redirecting user
})
})
app.get('/error', (req, res) => {
res.send("Custom error landing page.")
})
app.listen(port, () => {
console.log(`Example app listening at http://localhost:${port}`)
})
app.listen(port);

7. c) Module Name: Connecting to MongoDB with Mongoose, Validation Types and Defaults
Write a Mongoose schema to connect with MongoDB.

PROGRAM: -
const express = require("express");
const mongoose = require("mongoose");
const Router = require("./routes")
const app = express();
app.use(express.json());
mongoose.connect('mongodb://localhost:27017/usersdb',
{
useNewUrlParser: true,
useFindAndModify: false,
useUnifiedTopology: true
}
);
app.use(Router);
app.listen(3000, () => {
console.log("Server is running at port 3000");
});
OUTPUT: -

7. d) Module Name: Models
Write a program to wrap the Schema into a Model object
PROGRAM: -
models.js
const mongoose = require("mongoose");
const UserSchema = new mongoose.Schema({
name: {
type: String,
required: true,
},
age: {
type: Number,
default: 0,
},
});
const User = mongoose.model("User", UserSchema);
module.exports = User;
loading schema.
const express = require("express");
const userModel = require("./models");
const app = express();
OUTPUT: 
